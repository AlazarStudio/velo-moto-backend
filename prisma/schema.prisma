// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Buyer {
  contractor
  customer
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  login     String   @unique
  name      String
  password  String
  Cart      Cart[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String
  Item Item[]
}

model Item {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  name            String
  color           String
  gender          String     @default("Unspecified")
  ageGroup        String     @default("Unspecified") @map("age_group")
  images          String[]
  description     String?
  group           Group      @relation(fields: [groupId], references: [id])
  groupId         Int
  type            String?
  price           Int
  priceForSale    Int        @map("price_for_sale")
  code            Int
  barcode         String
  nds             Int?       @default(0)
  frame           String?
  system          String?
  size            String?
  ratchet         String?
  weight          String?
  speed           String?
  fork            String?
  carriage        String?
  flywheels       String?
  breaks          String?
  frontDerailleur String?    @map("front_derailleur")
  backDerailleur  String?    @map("back_derailleur")
  bushings        String?
  rubber          String?
  wheelSize       String?    @map("wheel_size")
  frameGrouve     String?    @map("frame_grouve")
  amortization    String?
  // itemCount       Int?       @default(0) @map("item_count")
  Receipt         Receipt[]
  Sale            Sale[]
  WriteOff        WriteOff[]
  Warehouse       Warehouse?
  Store           Store?
  Cart            Cart[]
}

model Receipt {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  quantity  Int
  price     Int?
}

model Sale {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       Int
  quantity     Int
  price        Int?
  contrAgent   ContrAgent? @relation(fields: [contrAgentId], references: [id])
  contrAgentId Int?
  buyertype    Buyer
  source       String
}

model WriteOff {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  quantity  Int
  reason    String?
  price     Int?
}

model ContrAgent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  number    String
  email     String
  adress    String
  Sale      Sale[]
  Cart      Cart[]
}

model Warehouse {
  id     Int  @id @default(autoincrement())
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int  @unique
  count  Int  @default(0)
}

model Store {
  id     Int  @id @default(autoincrement())
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int  @unique
  count  Int  @default(0)
}

model Cart {
  id           Int         @id @default(autoincrement())
  userId       Int?
  itemId       Int
  quantity     Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  User         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contrAgent   ContrAgent? @relation(fields: [contrAgentId], references: [id])
  contrAgentId Int?
  buyertype    Buyer

  @@unique([userId, itemId, buyertype])
}
